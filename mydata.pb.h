// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mydata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mydata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mydata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mydata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mydata_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mydata_2eproto;
class ChannelData;
struct ChannelDataDefaultTypeInternal;
extern ChannelDataDefaultTypeInternal _ChannelData_default_instance_;
class CollectionData;
struct CollectionDataDefaultTypeInternal;
extern CollectionDataDefaultTypeInternal _CollectionData_default_instance_;
class FrameData;
struct FrameDataDefaultTypeInternal;
extern FrameDataDefaultTypeInternal _FrameData_default_instance_;
class SensorData;
struct SensorDataDefaultTypeInternal;
extern SensorDataDefaultTypeInternal _SensorData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ChannelData* Arena::CreateMaybeMessage<::ChannelData>(Arena*);
template<> ::CollectionData* Arena::CreateMaybeMessage<::CollectionData>(Arena*);
template<> ::FrameData* Arena::CreateMaybeMessage<::FrameData>(Arena*);
template<> ::SensorData* Arena::CreateMaybeMessage<::SensorData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SensorData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SensorData) */ {
 public:
  inline SensorData() : SensorData(nullptr) {}
  ~SensorData() override;
  explicit PROTOBUF_CONSTEXPR SensorData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SensorData(const SensorData& from);
  SensorData(SensorData&& from) noexcept
    : SensorData() {
    *this = ::std::move(from);
  }

  inline SensorData& operator=(const SensorData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorData& operator=(SensorData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SensorData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SensorData* internal_default_instance() {
    return reinterpret_cast<const SensorData*>(
               &_SensorData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SensorData& a, SensorData& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SensorData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SensorData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SensorData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SensorData& from) {
    SensorData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SensorData";
  }
  protected:
  explicit SensorData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelDataFieldNumber = 1,
    kIsDroppedPacketFieldNumber = 2,
  };
  // repeated .ChannelData channelData = 1;
  int channeldata_size() const;
  private:
  int _internal_channeldata_size() const;
  public:
  void clear_channeldata();
  ::ChannelData* mutable_channeldata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChannelData >*
      mutable_channeldata();
  private:
  const ::ChannelData& _internal_channeldata(int index) const;
  ::ChannelData* _internal_add_channeldata();
  public:
  const ::ChannelData& channeldata(int index) const;
  ::ChannelData* add_channeldata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChannelData >&
      channeldata() const;

  // bool isDroppedPacket = 2;
  void clear_isdroppedpacket();
  bool isdroppedpacket() const;
  void set_isdroppedpacket(bool value);
  private:
  bool _internal_isdroppedpacket() const;
  void _internal_set_isdroppedpacket(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SensorData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChannelData > channeldata_;
    bool isdroppedpacket_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mydata_2eproto;
};
// -------------------------------------------------------------------

class ChannelData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChannelData) */ {
 public:
  inline ChannelData() : ChannelData(nullptr) {}
  ~ChannelData() override;
  explicit PROTOBUF_CONSTEXPR ChannelData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelData(const ChannelData& from);
  ChannelData(ChannelData&& from) noexcept
    : ChannelData() {
    *this = ::std::move(from);
  }

  inline ChannelData& operator=(const ChannelData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelData& operator=(ChannelData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelData* internal_default_instance() {
    return reinterpret_cast<const ChannelData*>(
               &_ChannelData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChannelData& a, ChannelData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChannelData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChannelData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChannelData& from) {
    ChannelData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChannelData";
  }
  protected:
  explicit ChannelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated float data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:ChannelData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mydata_2eproto;
};
// -------------------------------------------------------------------

class FrameData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FrameData) */ {
 public:
  inline FrameData() : FrameData(nullptr) {}
  ~FrameData() override;
  explicit PROTOBUF_CONSTEXPR FrameData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameData(const FrameData& from);
  FrameData(FrameData&& from) noexcept
    : FrameData() {
    *this = ::std::move(from);
  }

  inline FrameData& operator=(const FrameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameData& operator=(FrameData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameData& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameData* internal_default_instance() {
    return reinterpret_cast<const FrameData*>(
               &_FrameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FrameData& a, FrameData& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FrameData& from) {
    FrameData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FrameData";
  }
  protected:
  explicit FrameData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorDataFieldNumber = 1,
  };
  // repeated .SensorData sensorData = 1;
  int sensordata_size() const;
  private:
  int _internal_sensordata_size() const;
  public:
  void clear_sensordata();
  ::SensorData* mutable_sensordata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SensorData >*
      mutable_sensordata();
  private:
  const ::SensorData& _internal_sensordata(int index) const;
  ::SensorData* _internal_add_sensordata();
  public:
  const ::SensorData& sensordata(int index) const;
  ::SensorData* add_sensordata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SensorData >&
      sensordata() const;

  // @@protoc_insertion_point(class_scope:FrameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SensorData > sensordata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mydata_2eproto;
};
// -------------------------------------------------------------------

class CollectionData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CollectionData) */ {
 public:
  inline CollectionData() : CollectionData(nullptr) {}
  ~CollectionData() override;
  explicit PROTOBUF_CONSTEXPR CollectionData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollectionData(const CollectionData& from);
  CollectionData(CollectionData&& from) noexcept
    : CollectionData() {
    *this = ::std::move(from);
  }

  inline CollectionData& operator=(const CollectionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectionData& operator=(CollectionData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollectionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollectionData* internal_default_instance() {
    return reinterpret_cast<const CollectionData*>(
               &_CollectionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CollectionData& a, CollectionData& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectionData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollectionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollectionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollectionData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CollectionData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CollectionData& from) {
    CollectionData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectionData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CollectionData";
  }
  protected:
  explicit CollectionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .FrameData data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::FrameData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameData >*
      mutable_data();
  private:
  const ::FrameData& _internal_data(int index) const;
  ::FrameData* _internal_add_data();
  public:
  const ::FrameData& data(int index) const;
  ::FrameData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameData >&
      data() const;

  // @@protoc_insertion_point(class_scope:CollectionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameData > data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mydata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SensorData

// repeated .ChannelData channelData = 1;
inline int SensorData::_internal_channeldata_size() const {
  return _impl_.channeldata_.size();
}
inline int SensorData::channeldata_size() const {
  return _internal_channeldata_size();
}
inline void SensorData::clear_channeldata() {
  _impl_.channeldata_.Clear();
}
inline ::ChannelData* SensorData::mutable_channeldata(int index) {
  // @@protoc_insertion_point(field_mutable:SensorData.channelData)
  return _impl_.channeldata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChannelData >*
SensorData::mutable_channeldata() {
  // @@protoc_insertion_point(field_mutable_list:SensorData.channelData)
  return &_impl_.channeldata_;
}
inline const ::ChannelData& SensorData::_internal_channeldata(int index) const {
  return _impl_.channeldata_.Get(index);
}
inline const ::ChannelData& SensorData::channeldata(int index) const {
  // @@protoc_insertion_point(field_get:SensorData.channelData)
  return _internal_channeldata(index);
}
inline ::ChannelData* SensorData::_internal_add_channeldata() {
  return _impl_.channeldata_.Add();
}
inline ::ChannelData* SensorData::add_channeldata() {
  ::ChannelData* _add = _internal_add_channeldata();
  // @@protoc_insertion_point(field_add:SensorData.channelData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChannelData >&
SensorData::channeldata() const {
  // @@protoc_insertion_point(field_list:SensorData.channelData)
  return _impl_.channeldata_;
}

// bool isDroppedPacket = 2;
inline void SensorData::clear_isdroppedpacket() {
  _impl_.isdroppedpacket_ = false;
}
inline bool SensorData::_internal_isdroppedpacket() const {
  return _impl_.isdroppedpacket_;
}
inline bool SensorData::isdroppedpacket() const {
  // @@protoc_insertion_point(field_get:SensorData.isDroppedPacket)
  return _internal_isdroppedpacket();
}
inline void SensorData::_internal_set_isdroppedpacket(bool value) {
  
  _impl_.isdroppedpacket_ = value;
}
inline void SensorData::set_isdroppedpacket(bool value) {
  _internal_set_isdroppedpacket(value);
  // @@protoc_insertion_point(field_set:SensorData.isDroppedPacket)
}

// -------------------------------------------------------------------

// ChannelData

// repeated float data = 1;
inline int ChannelData::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int ChannelData::data_size() const {
  return _internal_data_size();
}
inline void ChannelData::clear_data() {
  _impl_.data_.Clear();
}
inline float ChannelData::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline float ChannelData::data(int index) const {
  // @@protoc_insertion_point(field_get:ChannelData.data)
  return _internal_data(index);
}
inline void ChannelData::set_data(int index, float value) {
  _impl_.data_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChannelData.data)
}
inline void ChannelData::_internal_add_data(float value) {
  _impl_.data_.Add(value);
}
inline void ChannelData::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:ChannelData.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ChannelData::_internal_data() const {
  return _impl_.data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ChannelData::data() const {
  // @@protoc_insertion_point(field_list:ChannelData.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ChannelData::_internal_mutable_data() {
  return &_impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ChannelData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ChannelData.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// FrameData

// repeated .SensorData sensorData = 1;
inline int FrameData::_internal_sensordata_size() const {
  return _impl_.sensordata_.size();
}
inline int FrameData::sensordata_size() const {
  return _internal_sensordata_size();
}
inline void FrameData::clear_sensordata() {
  _impl_.sensordata_.Clear();
}
inline ::SensorData* FrameData::mutable_sensordata(int index) {
  // @@protoc_insertion_point(field_mutable:FrameData.sensorData)
  return _impl_.sensordata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SensorData >*
FrameData::mutable_sensordata() {
  // @@protoc_insertion_point(field_mutable_list:FrameData.sensorData)
  return &_impl_.sensordata_;
}
inline const ::SensorData& FrameData::_internal_sensordata(int index) const {
  return _impl_.sensordata_.Get(index);
}
inline const ::SensorData& FrameData::sensordata(int index) const {
  // @@protoc_insertion_point(field_get:FrameData.sensorData)
  return _internal_sensordata(index);
}
inline ::SensorData* FrameData::_internal_add_sensordata() {
  return _impl_.sensordata_.Add();
}
inline ::SensorData* FrameData::add_sensordata() {
  ::SensorData* _add = _internal_add_sensordata();
  // @@protoc_insertion_point(field_add:FrameData.sensorData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SensorData >&
FrameData::sensordata() const {
  // @@protoc_insertion_point(field_list:FrameData.sensorData)
  return _impl_.sensordata_;
}

// -------------------------------------------------------------------

// CollectionData

// repeated .FrameData data = 1;
inline int CollectionData::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int CollectionData::data_size() const {
  return _internal_data_size();
}
inline void CollectionData::clear_data() {
  _impl_.data_.Clear();
}
inline ::FrameData* CollectionData::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:CollectionData.data)
  return _impl_.data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameData >*
CollectionData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:CollectionData.data)
  return &_impl_.data_;
}
inline const ::FrameData& CollectionData::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const ::FrameData& CollectionData::data(int index) const {
  // @@protoc_insertion_point(field_get:CollectionData.data)
  return _internal_data(index);
}
inline ::FrameData* CollectionData::_internal_add_data() {
  return _impl_.data_.Add();
}
inline ::FrameData* CollectionData::add_data() {
  ::FrameData* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:CollectionData.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameData >&
CollectionData::data() const {
  // @@protoc_insertion_point(field_list:CollectionData.data)
  return _impl_.data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mydata_2eproto
